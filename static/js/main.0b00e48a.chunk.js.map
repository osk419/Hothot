{"version":3,"sources":["heart-filled.svg","kiss.svg","hothot.png","heart.svg","Kiss.js","Hothot.js","Heart.js","HeartGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Kiss","props","className","style","left","this","position","x","top","y","src","kiss","heart","React","Component","Hothot","createKiss","e","persist","setState","prevState","kisses","clientX","clientY","state","onClick","bind","hothot","zIndex","transform","length","width","window","screen","devicePixelRatio","height","Heart","Math","random","scale","animationDuration","animationDelay","heart1","heart2","HeartGenerator","heartList","index","push","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b00e48a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart-filled.957b9b4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/kiss.fdcb410f.svg\";","module.exports = __webpack_public_path__ + \"static/media/hothot.3d51765d.png\";","module.exports = __webpack_public_path__ + \"static/media/heart.0b7262d6.svg\";","import React from 'react';\r\nimport kiss from './kiss.svg'\r\nimport heart from \"./heart-filled.svg\";\r\nimport './App.css';\r\n\r\nclass Kiss extends React.Component {\r\n\r\n    constructor(props) {\r\n        super()\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <img className='kiss' style={{left: this.props.position.x, top: this.props.position.y}} src={kiss}></img> \r\n                <img className='kiss-heart' style={{left: this.props.position.x, top: this.props.position.y}} src={heart}></img> \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Kiss;","import React from 'react';\r\nimport hothot from './hothot.png'\r\nimport kiss from './kiss.svg'\r\nimport Kiss from './Kiss.js'\r\nimport './App.css';\r\n\r\nclass Hothot extends React.Component {\r\n\r\n    constructor(props) {\r\n        super()\r\n        this.state = { kisses: [] }\r\n    }\r\n\r\n    createKiss = (e) => {\r\n        e.persist()\r\n        this.setState((prevState) => ({kisses: [...prevState.kisses, <Kiss position={{x: e.clientX-16, y: e.clientY-16}}/>]}))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <img className='hothot' onClick={this.createKiss.bind(this)} src={hothot} style={{zIndex: 1, transform: `scale(${0.5})`}}></img>\r\n                <img className='hothot-glow' src={hothot} style={{zIndex: 0.5, transform: `scale(${0.5})`}}></img>    \r\n                {this.state.kisses}\r\n                <b className='love-counter'> Love Counter: {this.state.kisses.length} </b> \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hothot;","import React from \"react\";\r\nimport heart1 from \"./heart-filled.svg\";\r\nimport heart2 from \"./heart.svg\";\r\nimport \"./App.css\";\r\n\r\nconst width = window.screen.width * window.devicePixelRatio;\r\nconst height = window.screen.height * window.devicePixelRatio;\r\nconst size = 240\r\n\r\nclass Heart extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            left: Math.random() * width - 240,\r\n            top: Math.random() * height -240,\r\n            scale: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img\r\n                className=\"heart\"\r\n                style={{\r\n                    transform: `scale(${this.state.scale})`,\r\n                    left: this.state.left,\r\n                    top: this.state.top,\r\n                    animationDuration: `${Math.random() * 3 + 2}s`,\r\n                    animationDelay: `${Math.random() * -100}s`\r\n                }}\r\n                src={Math.random() < 0.8 ? heart1 : heart2}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Heart;\r\n","import React from 'react';\r\nimport Heart from './Heart.js'\r\nimport './App.css';\r\n\r\nconst nbrOfHearts = 663552000;\r\nconst width = window.screen.width * window.devicePixelRatio\r\nconst height = window.screen.height * window.devicePixelRatio\r\nclass HeartGenerator extends React.Component {\r\n\r\n    constructor(props) {\r\n        super()\r\n        this.state = { heartList: [<Heart/>] }\r\n        for (let index = 0; index < nbrOfHearts/(width*height); index++) {\r\n            this.state.heartList.push(<Heart/>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.heartList\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeartGenerator;","import React from 'react';\nimport './App.css';\nimport Hothot from './Hothot.js'\nimport HeartGenerator from './HeartGenerator.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HeartGenerator/>\n        <Hothot/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}